{"version":3,"sources":["scripts/main.js"],"names":["restartButton","gameStatus","ROWS_COUNT","START_CELLS_COUNT","NEW_CELLS_TURN_COUNT","POSSIBLE_BLOCK_VALUES","startButton","document","getElementsByClassName","visualCells","gameScore","messageStart","messageLose","messageWin","addEventListener","e","turn","score","cells","startGame","addRandomCells","getGameState","classList","add","textContent","remove","restartGame","clearGameState","times","cellsValues","Object","values","flat","emptyCells","forEach","cellValue","index","push","length","i","randomIndex","Math","floor","random","value","changeCell","action","includes","key","hasMoved","moveCellsUp","moveCellsDown","moveCellsLeft","moveCellsRight","checkWin","checkAvailableMoves","removePreviousBlockState","cell","item","cellIndex","col","row","currentRow","currentCol"],"mappings":"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","file":"main.d0838776.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nlet gameStatus = false;\n\nconst ROWS_COUNT = 4;\nconst START_CELLS_COUNT = 2;\nconst NEW_CELLS_TURN_COUNT = 1;\nconst POSSIBLE_BLOCK_VALUES = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048];\n\nlet restartButton;\nconst startButton = document.getElementsByClassName('start')[0];\nconst visualCells = document.getElementsByClassName('field-cell');\nconst gameScore = document.getElementsByClassName('game-score')[0];\n\nconst messageStart = document.getElementsByClassName('message-start')[0];\nconst messageLose = document.getElementsByClassName('message-lose')[0];\nconst messageWin = document.getElementsByClassName('message-win')[0];\n\ndocument.addEventListener('keydown', e => turn(e));\n\nconst cells = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score;\n\nstartButton.addEventListener('click', startGame);\n\nfunction startGame() {\n  const addingRandomCells = addRandomCells(START_CELLS_COUNT);\n\n  if (addingRandomCells === null) {\n    return;\n  }\n\n  score = 0;\n  gameStatus = true;\n\n  getGameState();\n\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n\n  restartButton = document.getElementsByClassName('restart')[0];\n  restartButton.addEventListener('click', restartGame);\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n}\n\nfunction restartGame() {\n  clearGameState();\n  getGameState();\n  startGame();\n}\n\nfunction addRandomCells(times = 1) {\n  const cellsValues = Object.values(cells).flat();\n  const emptyCells = [];\n\n  cellsValues.forEach((cellValue, index) => {\n    if (cellValue === 0) {\n      emptyCells.push(index);\n    }\n  });\n\n  if (emptyCells.length > 0) {\n    for (let i = 0; i < times; i++) {\n      const randomIndex = Math.floor(emptyCells.length * Math.random());\n      const value = Math.random() < 0.1 ? 4 : 2;\n\n      changeCell(emptyCells[randomIndex], value);\n    }\n  } else {\n    return null;\n  }\n}\n\nfunction turn(action) {\n  const GAME_BUTTONS = ['ArrowUp', 'ArrowDown', 'ArrowRight', 'ArrowLeft'];\n\n  if (!GAME_BUTTONS.includes(action.key) || !gameStatus) {\n    return;\n  }\n\n  let hasMoved = false;\n\n  switch (action.key) {\n    case 'ArrowUp':\n      hasMoved = moveCellsUp();\n      break;\n    case 'ArrowDown':\n      hasMoved = moveCellsDown();\n      break;\n    case 'ArrowLeft':\n      hasMoved = moveCellsLeft();\n      break;\n    case 'ArrowRight':\n      hasMoved = moveCellsRight();\n      break;\n  }\n\n  getGameState();\n\n  if (hasMoved) {\n    addRandomCells(NEW_CELLS_TURN_COUNT);\n    getGameState();\n  }\n\n  checkWin();\n  checkAvailableMoves();\n}\n\nfunction checkWin() {\n  const cellsValues = Object.values(cells).flat();\n\n  for (let i = 0; i < cellsValues.length; i++) {\n    if (cellsValues[i] === 2048) {\n      gameStatus = false;\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\nfunction getGameState() {\n  const cellsValues = Object.values(cells).flat();\n\n  for (let i = 0; i < visualCells.length; i++) {\n    removePreviousBlockState(visualCells[i]);\n\n    if (cellsValues[i] !== 0) {\n      visualCells[i].textContent = cellsValues[i];\n    } else if (cellsValues[i] === 0) {\n      visualCells[i].textContent = '';\n    }\n\n    visualCells[i].classList.add(`field-cell--${cellsValues[i]}`);\n  }\n\n  gameScore.textContent = score;\n}\n\nfunction removePreviousBlockState(cell) {\n  POSSIBLE_BLOCK_VALUES.forEach(\n    item => cell.classList.remove(`field-cell--${item}`),\n  );\n}\n\nfunction clearGameState() {\n  for (let i = 0; i < cells.length; i++) {\n    cells[i] = [0, 0, 0, 0];\n  }\n}\n\nfunction changeCell(cellIndex, value) {\n  switch (Math.floor(cellIndex / ROWS_COUNT)) {\n    case 0:\n      cells[0][cellIndex % ROWS_COUNT] = value;\n      break;\n    case 1:\n      cells[1][cellIndex % ROWS_COUNT] = value;\n      break;\n    case 2:\n      cells[2][cellIndex % ROWS_COUNT] = value;\n      break;\n    case 3:\n      cells[3][cellIndex % ROWS_COUNT] = value;\n      break;\n  }\n}\n\nfunction moveCellsUp() {\n  let hasMoved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      if (cells[row][col] !== 0) {\n        let currentRow = row;\n\n        while (currentRow > 0) {\n          if (cells[currentRow - 1][col] === 0) {\n            cells[currentRow - 1][col] = cells[currentRow][col];\n            cells[currentRow][col] = 0;\n            currentRow--;\n            hasMoved = true;\n          } else if (cells[currentRow - 1][col] === cells[currentRow][col]) {\n            cells[currentRow - 1][col] *= 2;\n            score += cells[currentRow - 1][col];\n            cells[currentRow][col] = 0;\n            hasMoved = true;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return hasMoved;\n}\n\nfunction moveCellsDown() {\n  let hasMoved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      if (cells[row][col] !== 0) {\n        let currentRow = row;\n\n        while (currentRow < 3) {\n          if (cells[currentRow + 1][col] === 0) {\n            cells[currentRow + 1][col] = cells[currentRow][col];\n            cells[currentRow][col] = 0;\n            currentRow++;\n            hasMoved = true;\n          } else if (cells[currentRow + 1][col] === cells[currentRow][col]) {\n            cells[currentRow + 1][col] *= 2;\n            score += cells[currentRow + 1][col];\n            cells[currentRow][col] = 0;\n            hasMoved = true;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return hasMoved;\n}\n\nfunction moveCellsLeft() {\n  let hasMoved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 1; col < 4; col++) {\n      if (cells[row][col] !== 0) {\n        let currentCol = col;\n\n        while (currentCol > 0) {\n          if (cells[row][currentCol - 1] === 0) {\n            cells[row][currentCol - 1] = cells[row][currentCol];\n            cells[row][currentCol] = 0;\n            currentCol--;\n            hasMoved = true;\n          } else if (cells[row][currentCol - 1] === cells[row][currentCol]) {\n            cells[row][currentCol - 1] *= 2;\n            score += cells[row][currentCol - 1];\n            cells[row][currentCol] = 0;\n            hasMoved = true;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return hasMoved;\n}\n\nfunction moveCellsRight() {\n  let hasMoved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 2; col >= 0; col--) {\n      if (cells[row][col] !== 0) {\n        let currentCol = col;\n\n        while (currentCol < 3) {\n          if (cells[row][currentCol + 1] === 0) {\n            cells[row][currentCol + 1] = cells[row][currentCol];\n            cells[row][currentCol] = 0;\n            currentCol++;\n            hasMoved = true;\n          } else if (cells[row][currentCol + 1] === cells[row][currentCol]) {\n            cells[row][currentCol + 1] *= 2;\n            score += cells[row][currentCol + 1];\n            cells[row][currentCol] = 0;\n            hasMoved = true;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return hasMoved;\n}\n\nfunction checkAvailableMoves() {\n  for (let row = 0; row < 4; row++) {\n    for (let col = 1; col < 4; col++) {\n      if (cells[row][col] === 0 || cells[row][col] === cells[row][col - 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 2; col >= 0; col--) {\n      if (cells[row][col] === 0 || cells[row][col] === cells[row][col + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      if (cells[row][col] === 0 || cells[row][col] === cells[row - 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      if (cells[row][col] === 0 || cells[row][col] === cells[row + 1][col]) {\n        return true;\n      }\n    }\n  }\n\n  gameStatus = false;\n  messageLose.classList.remove('hidden');\n}\n"]}